This directory contains files for running the complete Joshua
pipeline, from corpus preparation to testing and evaluation.  The main
entry point is =pipeline.pl=, a script designed in the spirit of the
Moses decoder's =train-factored-phrase-model.perl=, but with a number
of enhancements.  These are:

- Run the complete pipeline from start to finish.

- Caching of pipeline results (based on file contents, not file
  existence or timestamps), so the pipeline can be debugged or shared
  across similar runs with (almost) no time spent recomputing
  expensive steps.
 
- Jump into the pipeline at a set of predefined points.

  This document describes how to use this pipeline.

== QUICK START =======================================================

1. See the INSTALL file to setup the pipeline.  If Joshua is
   installed, this is mostly a matter of making sure that a few
   dependencies are installed and environment variables are setup
   pointing to them.

2. Run the pipeline.  The following is the minimal invocation to run
   the complete pipeline:

   $JOSHUA/scripts/training/pipeline.pl  \
       --corpus data/train               \
	   --tune data/tune                  \
	   --test data/test                  \
	   --fr ur                           \
	   --en en

   (This assumes that a subdirectory data/ exists in the current
   directory, that you are translating from a language identified by
   the "ur" extension to a language identified by the "en" extension,
   that the training data can be found at data/train.en and
   data/train.ur, and so on).

   The --corpus, --tune, and --test flags define file prefixes that
   are concatened with the language extensions given by --en and
   --fr.  The prefixes can be either absolute or relative pathnames. 
     
   This will run the complete pipeline, producing BLEU scores at the
   end.  Read on for further information.

== COMPLETE LIST OF COMMAND-LINE OPTIONS =============================

pipeline.pl

  --rundir DIR

    Place all files beneath the specified directory.  The default is
    the current directory.

  --first-step STEP
  --last-step STEP
  
    Allows starting and stopping at at of the following steps: 

	- ALIGN (alignment of the training data)
	- THRAX (grammar extraction, including parsing for SAMT grammars)
	- MERT (tuning)
	- TEST (decoding a test set)

  --fr FR
  --en EN

    Specifies the source (fr) and target (en) languages.

  --corpus CORPUS

    Specifies a file prefix for a training corpus.  When running the
    full script, any number of flags can be provided; the training
    corpora are all concatenated together for alignment and grammar
    extraction.  When skipping steps, only a single corpus can be
    provided (so you must do the concatenation yourself, if you so
    need). 

  --tune PREFIX
  --test PREFIX
  
    Specify file prefixes for tuning and test data.  Unlike --corpus,
    only one instance each of --tune or --test is allowed (if you
    provide multiple ones, only the last value is used).

  --type {hiero,samt}

    Whether to learn a Hiero or SAMT grammar.  The default is Hiero.

  --alignment FILE

    Provide an alignment for the training data.  The format is the
    standard format where 0-indexed many-many alignment pairs for a
    sentence are provided on a line, source language first, e.g.,

    0-0 0-1 1-2 1-7 ...

	This value is required if you are skipping the alignment step.

  --mbr [default]
  --nombr

    Do (not) do MBR reranking of the n-best output of the test data.

  --lmfile FILE

    Use the specified file as the language model for decoding (for
    both tuning and decoding of the test set).  If not provided, a
    SRILM is used to build a Kneser-Ney interpolated 5-gram language
    model from the target side of the training data.

  --filter-lm [default]
  --no-filter-lm

    Use Kenneth Heafield's "filter" program to filter the language
    model to the training data.  This is only available if a training
    corpus was provided.

  --maxlen LEN [default=50]

    Remove parallel sentences from the training data that are longer
    than this length (on either side).

  --grammar FILE

    Use the specified grammar instead of learning one with Thrax.

  --joshua-config TEMPLATE

    Use the specified file as the Joshua config file instead of the
    default template.  This file is a template into which are
    substituted run-specific information; see the TEMPLATE section
    below for more information.

  --decoder-command TEMPLATE

    Use the specified file as the decoding command.  This file is a
    template into which are substituted run-specific information; see
    the TEMPLATE section below for more information.

  --thrax-conf FILE

    Use the provided Thrax configuration file instead of the default.

  --no-subsample [default]
  --subsample

    ** UNIMPLEMENTED ** Subsample the training data towards the tuning
       (and test) data.

  --qsub-args "ARGS"

    Provide the specified qsub arguments to the Joshua decoder command.

== MORE DETAIL =======================================================

The Joshua pipeline provides support for two major use ca

1. Running the pipeline from start to finish.  This is the use case
   described in the Quick Start above.  In addition, the user can
   specify the --last-step flag to quit early.  

2. Running pieces of the pipeline.  

   pipeline.pl allows early steps to be skipped over, in the event
   that you already have (say) an alignment or a grammar and want to
   proceed directly to later steps.



== TEMPLATES =========================================================

A few pieces of the pipeline are subject to enough variation across
runs and across computing environment that it is easier to provide
template files than to use command-line arguments.  The Joshua
pipeline allows the Joshua configuration file and the Joshua decoder
command to be templatized.  Here are the options available to those
files:

  <INPUT> is the file being decoded
  <OUTPUT> is the output file that the decoder command creates
  <FR> is the source language (--fr)
  <EN> is the target language (--en)
  <LMFILE> is the language model
  <MEM> is the amount of memory available to the Joshua decoder instances
  <OOV> is the OOV tag used in the grammar ("OOV" for SAMT, "X" for Hiero)
  <NUMJOBS> is the degree of parallelization for the Joshua decoder command
  <QSUB_ARGS> is the qsub arguments (--qsub-args)
  <REF> is the reference file
  <CONFIG> is the location of the joshua configuration file
  <LOG> is where the Joshua decoder should put its log file

