<?xml version="1.0"?>
<!-- Build file for Joshua. Last changed: $LastChangedDate$ -->
<project name="JHU Decoder" default="compile" basedir=".">
	
	<property environment="env" />
	
	<property name="src"    value="./src" />
	<property name="test"   value="./test" />
	<property name="build"  value="./bin" />
	<property name="lib"    value="./lib" />
	<property name="doc"    value="./javadoc" />
	<property name="testng" value="./lib/testng-5.8-jdk15.jar"/>
	<!-- <property name="bdb"    value="./lib/je-3.2.23.jar"/> -->
	<property name="cli"    value="./lib/commons-cli-2.0-SNAPSHOT.jar"/>
	
	<path id="pmd.classpath">
		<fileset dir="./lib/">
			<!-- PMD uses a BSD-like license, see ./lib/PMD_LICENSE.txt -->
			<include name="pmd-4.2.5.jar"/>
			<include name="jaxen-1.1.1.jar"/>
			<include name="asm-3.1.jar "/>
			<!-- The tarball also came with a JUnit jar, but it seems unecessary. -->
		</fileset>
	</path>
	
	
	<!-- Define the unit testing task -->
	<taskdef resource="testngtasks" classpath="${testng}"/>
	
	
	<!-- Create the build directory for compiled class files -->	
	<target name="init">
		<tstamp/>
		<mkdir dir="${build}"/>
		<mkdir dir="${lib}"/>
	</target>
	
	<!-- Check for environment variables -->
	<target name="set-srilm" unless="env.SRILM">
	  <fail message="It seems you did not set the $SRILM environmant variable." />
	</target>
	
	<!-- Check for environment variables -->
	<target name="set-java-home" unless="env.JAVA_HOME">
	  <fail message="It seems you did not set the $JAVA_HOME environmant variable." />
	  <!-- TODO: add suggestion to use /System/Library/Frameworks/JavaVM.framework/Home/ iff on OSX --> 
	</target>
	
	<!-- Compile and install SRILM wrapper -->
	<target name="srilm" depends="init, set-srilm, set-java-home">
		<!-- BUG: this is run twice for `ant compile test`, since the Makefile will clean before building (thus it must rebuild everything) -->
		<exec executable="make">
			<arg value="-C" />
			<arg value="${src}/joshua/decoder/ff/lm/srilm" />
		</exec>
	</target>
	
	
	<!-- Compile the Java code -->
	<target name="compile" depends="init,srilm">
		<javac compiler="javac1.5" srcdir="${src}" destdir="${build}" 
			classpath="${cli}" debug="on" encoding="utf8"> 
			<!-- This should be on, so people see it.
			     But it can be quite verbose...
			<compilerarg value="-deprecation"/>
			-->
		</javac>
	</target>

	
	<!-- Compile the Javadocs into web pages -->
	<target name="javadoc">
		<mkdir dir="${doc}"/>
		<javadoc packagenames="joshua.*,org.apache.commons.cli.*"
        	sourcepath="${src}"
			destdir="${doc}"
			author="true"
			version="true"
			overview="src/overview.html"
		>
			<link href="http://java.sun.com/j2se/1.5.0/docs/api" />
		</javadoc>
	</target>
	
	
	<!-- Delete the compiled files -->
	<target name="clean">
		<exec executable="make">
			<arg value="-C" />
			<arg value="${src}/joshua/decoder/ff/lm/srilm" />
			<arg value="clean" />
		</exec>
		<delete verbose="true" quiet="true">
			<fileset dir="${build}">
				<include name="**/*.class"/>
			</fileset>
		</delete>
		<!-- TODO: shouldn't we delete the jar file too? Or maybe under a task called 'realclean' or 'distclean' -->
	</target>
	
	
	<!-- Create a JAR file of the compiled classes -->
	<target name="jar" depends="compile">
		<jar destfile="${build}/joshua.jar">
			<fileset dir="${build}">
				<include name="**/*.class"/>
			</fileset>
		</jar>
	</target>

	
	<!-- Create a JAR file of the source code -->
	<target name="source-jar">
		<jar destfile="${build}/joshua-src.jar">
			<fileset dir="${build}">
				<include name="**/*.java"/>
			</fileset>
		</jar>
	</target>
	
	
	<!-- Compile the unit test code -->
	<!-- FIXME: why is this broken out from the 'test' target? -->
	<target name="compile-tests" depends="init"> 
		<javac compiler="javac1.5" srcdir="${test}" destdir="${build}" 
			classpath="${testng}" debug="on" encoding="utf8"/> 
	</target>
	
	<!-- Run the unit tests -->
	<target name="test" depends="compile,compile-tests">
		<testng classpath="${build}" sourcedir="${test}">
			<jvmarg value="-Dfile.encoding=UTF8"/>
			<jvmarg value="-Djava.util.logging.config.file=logging.tests.properties"/>
			<xmlfileset dir="." includes="testng.xml"/>
		</testng>
	</target>
	
	
	
	<!-- Run the PMD tool for linting the source code.
		http://pmd.sourceforge.net/ant-task.html
	-->
	<target name="pmd">
		<taskdef
			name="pmd"
			classname="net.sourceforge.pmd.ant.PMDTask"
			classpathref="pmd.classpath"
			/>
		
		<!-- BUG: with all of this turned on it's very excessively verbose. We should create a rulesets/favorites.xml file to collect the rules we acually care about. Perhaps a few of them for differing levels of verbosity/pedantry. Of course, we could also define a collection of XSLT filters to grep through the result file (in XML format) and only pull out the ones we care about. -->
		<!-- TODO: we should also make a directory for all this output to go to. And we should add it to the 'distclean' task. -->
		<!-- N.B. PMD is run in the same process as Ant and therefore produces no visible output by default. -->
		<pmd shortFilenames="true">
			
		<!-- These are the absolute musts -->
			<ruleset>basic</ruleset>
			<ruleset>imports</ruleset>
			<ruleset>migrating</ruleset>
			<ruleset>clone</ruleset>
			<ruleset>finalizers</ruleset>
			
		<!-- These are also musts (but are verbose) -->
			<ruleset>unusedcode</ruleset>
			<ruleset>logging-java</ruleset>
			<!-- Take this one with a little grain of salt, for performance reasons. ArrayIsStoredDirectly is quite verbose. -->
			<ruleset>sunsecure</ruleset>
			
		<!-- These are also good (with a little salt) -->
			<!-- We mainly care about IfElseStmtsMustUseBraces. The IfStmtsMustUseBraces rule runs afoul of java-logger idioms. -->
			<ruleset>braces</ruleset>
			<!-- This typically wants 3~17 char tokens, which is a bit too strict (albeit, it would be nice). There is a way to up the 17 limit, if I can figure it out. Most all the other rules are quite good though. -->
			<ruleset>naming</ruleset>
			<ruleset>strictexception</ruleset>
			<!-- These two have LooseCoupling as a very verbose overlap. -->
			<ruleset>typeresolution</ruleset>
			<ruleset>coupling</ruleset>
			
		<!-- These should also be considered (with a fair bit of salt)
			Good rules include: SimplifyBooleanReturns, SimplifyBooleanExpressions, AvoidReassigningParameters, ConfusingTernary, UnnecessaryLocalBeforeReturn,...
			-->
			<ruleset>design</ruleset>
			
		<!-- These are good for analytic bugs (with a little salt) -->
			<ruleset>codesize</ruleset>
			<ruleset>strings</ruleset>
			<!-- The LocalVariableCouldBeFinal rule is excessively verbose. Don't modern java compilers do this analysis and make them final anyways? Of course, final is a very good thing for communicating intent to the maintainers.
			
			The MethodArgumentCouldBeFinal rule is a bit silly. Java copies values before calling methods, and other rules will say it's bad to reassign parameters. I don't know of any actual performance effect here.
			
			UseArrayListInsteadOfVector is very good, but probably caught elsewhere, like in migrating. AddEmptyString and AvoidArrayLoops are quite nice too.
			-->
			<ruleset>optimizations</ruleset>
			
			
			<!-- BUG: the links to class files also goes to pmd.sourceforge.net -->
			<!-- type = xml,html,text,csv,papari,summaryhtml
			
				summaryhtml lists the count of each violation type before the list itself. Also gives suppressed warnings summary at the end (also doable by setting 'showSuppressed').
				
				xml is the best, but it requires XSLT munging/browsing.
			-->
			<formatter
				type="summaryhtml"
				toFile="pmd_report.html"
				toConsole="false"
				linkPrefix="http://pmd.sourceforge.net/xref/"
				/>
			
			<fileset dir="${src}">
				<include name="**/*.java"/>
			</fileset>
		</pmd>
		
		<!-- Here's how to post-edit with XSLT
		<xslt in="pmd_report.xml" style="pmd_report.xslt" out="pmd_report.html" />
		-->
		<!-- TODO: this should use a property to avoid duplication -->
		<echo>Report created at pmd_report.html</echo>
		
		
		
		<!--
			Also run some tests on the JUnit test directory.
			(Actually we use TestNG, so this probably doesn't apply).
		
		<pmd shortFilenames="true">
			<ruleset>junit</ruleset>
			
			<formatter type="html" toFile="pmd/junit_report.html" linkPrefix="http://pmd.sourceforge.net/xref/"/>
			
			<fileset dir="${test}">
				<include name="**/*.java"/>
			</fileset>
		</pmd>
		-->
	</target>
	
</project>

