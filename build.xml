<?xml version="1.0"?>
<!-- Build file for Joshua. Last changed: $LastChangedDate$ -->
<project name="JHU Decoder" default="compile" basedir=".">
	
	<property environment="env" />
	
	<property name="src"    value="./src" />
	<property name="test"   value="./test" />
	<property name="build"  value="./bin" />
	<property name="lib"    value="./lib" />
	<property name="doc"    value="./javadoc" />
	<property name="pmd"    value="./pmd" />
	<property name="pmdOUT" value="${pmd}-output" />
	
	<property name="testng" value="./lib/testng-5.8-jdk15.jar"/>
	<!-- <property name="bdb"    value="./lib/je-3.2.23.jar"/> -->
	<property name="cli"    value="./lib/commons-cli-2.0-SNAPSHOT.jar"/>
	
	<path id="pmd.classpath">
		<fileset dir="./lib/">
			<!-- PMD uses a BSD-like license, see ./lib/PMD_LICENSE.txt -->
			<include name="pmd-4.2.5.jar"/>
			<include name="jaxen-1.1.1.jar"/>
			<include name="asm-3.1.jar "/>
			<!-- The tarball also came with a JUnit jar, but it seems unecessary. -->
		</fileset>
	</path>
	
	
	<!-- Define the unit testing task -->
	<taskdef resource="testngtasks" classpath="${testng}"/>
	
	
	<!-- Create the build directory for compiled class files -->	
	<target name="init">
		<tstamp/>
		<mkdir dir="${build}"/>
		<mkdir dir="${lib}"/>
	</target>
	
	<!-- Check for environment variables -->
	<target name="set-srilm" unless="env.SRILM">
	  <fail message="It seems you did not set the $SRILM environmant variable." />
	</target>
	
	<!-- Check for environment variables -->
	<target name="set-java-home" unless="env.JAVA_HOME">
	  <fail message="It seems you did not set the $JAVA_HOME environmant variable." />
	  <!-- TODO: add suggestion to use /System/Library/Frameworks/JavaVM.framework/Home/ iff on OSX --> 
	</target>
	
	<!-- Compile and install SRILM wrapper -->
	<target name="srilm" depends="init, set-srilm, set-java-home">
		<!-- BUG: this is run twice for `ant compile test`, since the Makefile will clean before building (thus it must rebuild everything) -->
		<exec executable="make">
			<arg value="-C" />
			<arg value="${src}/joshua/decoder/ff/lm/srilm" />
		</exec>
	</target>
	
	
	<!-- Compile the Java code -->
	<target name="compile" depends="init,srilm">
		<javac compiler="javac1.5" srcdir="${src}" destdir="${build}" 
			classpath="${cli}" debug="on" encoding="utf8"> 
			<!-- This should be on, so people see it.
			     But it can be quite verbose...
			<compilerarg value="-deprecation"/>
			-->
		</javac>
	</target>

	
	<!-- Compile the Javadocs into web pages -->
	<target name="javadoc">
		<mkdir dir="${doc}"/>
		<javadoc packagenames="joshua.*,org.apache.commons.cli.*"
        	sourcepath="${src}"
			destdir="${doc}"
			author="true"
			version="true"
			overview="src/overview.html"
		>
			<link href="http://java.sun.com/j2se/1.5.0/docs/api" />
		</javadoc>
	</target>
	
	
	<!-- Delete the compiled files -->
	<target name="clean">
		<exec executable="make">
			<arg value="-C" />
			<arg value="${src}/joshua/decoder/ff/lm/srilm" />
			<arg value="clean" />
		</exec>
		<delete verbose="true" quiet="true">
			<fileset dir="${build}">
				<include name="**/*.class"/>
			</fileset>
		</delete>
	</target>
	
	<!-- Delete all generated files -->
	<target name="distclean" depends="clean">
		<!-- TODO: call the srilm Makefile's distclean (once it exists) -->
		
		<!-- BUG: Hopefully these do what I mean. Checking in before testing. -->
		<delete verbose="true" quiet="true" includeEmptyDirs="true">
			<fileset dir="${build}">
				<include name="joshua.jar"/>
			</fileset>
		</delete>
		<delete verbose="true" quiet="true" includeEmptyDirs="true">
			<fileset dir="${pmdOUT}">
				<include name="report.html"/>
			</fileset>
		</delete>
	</target>
	
	
	<!-- Create a JAR file of the compiled classes -->
	<target name="jar" depends="compile">
		<jar destfile="${build}/joshua.jar">
			<fileset dir="${build}">
				<include name="**/*.class"/>
			</fileset>
		</jar>
	</target>

	
	<!-- Create a JAR file of the source code -->
	<target name="source-jar">
		<jar destfile="${build}/joshua-src.jar">
			<fileset dir="${build}">
				<include name="**/*.java"/>
			</fileset>
		</jar>
	</target>
	
	
	<!-- Compile the unit test code -->
	<!-- FIXME: why is this broken out from the 'test' target? -->
	<target name="compile-tests" depends="init"> 
		<javac compiler="javac1.5" srcdir="${test}" destdir="${build}" 
			classpath="${testng}" debug="on" encoding="utf8"/> 
	</target>
	
	<!-- Run the unit tests -->
	<target name="test" depends="compile,compile-tests">
		<testng classpath="${build}" sourcedir="${test}">
			<jvmarg value="-Dfile.encoding=UTF8"/>
			<jvmarg value="-Djava.util.logging.config.file=logging.tests.properties"/>
			<xmlfileset dir="." includes="testng.xml"/>
		</testng>
	</target>
	
	
	
	<!-- Run the PMD tool for linting the source code.
		http://pmd.sourceforge.net/ant-task.html
	-->
	<target name="pmd">
		<taskdef
			name="pmd"
			classname="net.sourceforge.pmd.ant.PMDTask"
			classpathref="pmd.classpath"
			/>
		
		
		<mkdir dir="${pmdOUT}"/>
		
		<!-- TODO: define a set of XSLT filters for searching and grepping through the output (which can be verbose) in type=xml format. -->
		<!-- N.B. PMD is run in the same process as Ant and therefore produces no visible output by default. -->
		<pmd shortFilenames="true" rulesetfiles="${pmd}/default-ruleset.xml">
			
			<!-- BUG: the links to class files also go to pmd.sourceforge.net -->
			<formatter
				type="summaryhtml"
				toFile="${pmdOUT}/report.html"
				toConsole="false"
				linkPrefix="http://pmd.sourceforge.net/xref/"
				/>
			
			<fileset dir="${src}">
				<include name="**/*.java"/>
			</fileset>
		</pmd>
		
		<!-- Here's how to post-edit with XSLT
		<xslt
			in="${pmdOUT}/report.xml"
			style="${pmd}/report.xslt"
			out="${pmdOUT}/report.html"
			/>
		-->
		
		<!-- TODO: this should use a property to avoid duplication -->
		<echo>Report created at ${pmdOUT}/report.html</echo>
	</target>
	
</project>

